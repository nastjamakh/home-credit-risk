# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

orbs:
  aws-cli: circleci/aws-cli@2.0.3
  aws-ecr: circleci/aws-ecr@8.0.0
  aws-code-deploy: circleci/aws-code-deploy@2.0.0


parameters:
  rebuild-image:
    type: boolean
    default: false

executors:
  in_docker_image:
    docker:
      - image: public.ecr.aws/i9f8r4q1/home-credit-risk:latest
    working_directory: /app/home-credit-risk
  python:
    docker:
      - image: cimg/python:3.9.12

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  train-staging:
    executor: python
    steps:
      - run:
          name: "SSH into staging EC2 instance"
          command: ssh -o StrictHostKeyChecking=no $EC2_STAGING_USER@$EC2_STAGING_PUBLIC_DNS \
                   docker exec -i home-credit-risk poetry run train train True \
                   exit

  train-production:
    executor: python
    steps:
      - run:
          name: "SSH into staging EC2 instance"
          command: ssh -o StrictHostKeyChecking=no $EC2_STAGING_USER@$EC2_STAGING_PUBLIC_DNS \
                   docker exec -i home-credit-risk poetry run train train True \
                   exit

  integration-tests-staging:
    executor: python
    steps:
      - run:
          name: "Integration tests on staging"
          command: echo "Skipping."

  lint:
    executor: in_docker_image
    steps:
      - run:
          name: Check syntax with flake8
          command: poetry run flake8 --max-line-length=100
      - run:
          name: Check syntax with black
          command: poetry run black src

  test-and-check-coverage:
    executor: in_docker_image
    steps:
      - run:
          name: Generate coverage data
          command: poetry run pytest

  build-and-push-image:
    machine:
      image: ubuntu-2004:current
    steps:
      - when:
          condition:
            or:
              - equal: [ master, << pipeline.git.branch >> ]
              - equal: [ true, << pipeline.parameters.rebuild-image >> ]
          steps:
            - run: ls


workflows:
  build_train_deploy:
    jobs:
      - build-and-push-image
      - aws-code-deploy/deploy:
          name: deploy-staging
          application-name: home-credit-risk
          bundle-bucket: home-credit-risk-dev
          bundle-key: code-deploy
          deployment-group: staging
          service-role-arn: code-deploy
          requires: ["build-and-push-image"]
      - train-staging:
          requires: ["deploy-staging"]
      - integration-tests-staging:
          requires: ["train-staging"]
      - aws-code-deploy/deploy:
          name: deploy-production
          application-name: home-credit-risk
          bundle-bucket: home-credit-risk-dev
          bundle-key: code-deploy
          deployment-group: prod
          service-role-arn: code-deploy
          requires: ["integration-tests-staging"]
      - train-production:
          requires: ["deploy-production"]
